
class GF:
    @staticmethod
    def multiply(a, b):
        result = 0
        while b > 0:
            if b & 1:
                result ^= a
            a <<= 1
            if a & 0x100:
                a ^= 0x11b  # irreducible polynomial for AES
            b >>= 1
        return result & 0xff

class AES:
    # S-box for SubBytes and SubWord
    SBOX = [
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
    ]

    # Round constants for key expansion (first 10 for AES-128)
    RCON = [
        0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36
    ]

    # MixColumns matrix
    MIX_COL_MATRIX = [
        [0x02, 0x03, 0x01, 0x01],
        [0x01, 0x02, 0x03, 0x01],
        [0x01, 0x01, 0x02, 0x03],
        [0x03, 0x01, 0x01, 0x02]
    ]

    # Inverse S-box for InvSubBytes
    INV_SBOX = [
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
    ]

    # Inverse MixColumns matrix
    INV_MIX_COL_MATRIX = [
        [0x0e, 0x0b, 0x0d, 0x09],
        [0x09, 0x0e, 0x0b, 0x0d],
        [0x0d, 0x09, 0x0e, 0x0b],
        [0x0b, 0x0d, 0x09, 0x0e]
    ]

    def __init__(self):
        self.GF = GF

    # Methods to be implemented
    def sub_bytes(self, state):
        # state is 4x4 list of bytes
        for i in range(4):
            for j in range(4):
                state[i][j] = self.SBOX[state[i][j]]
        return state

    def shift_rows(self, state):
        # Shift rows: row 0 no shift, row 1 left by 1, row 2 by 2, row 3 by 3
        state[1] = state[1][1:] + state[1][:1]
        state[2] = state[2][2:] + state[2][:2]
        state[3] = state[3][3:] + state[3][:3]
        return state

    def mix_columns(self, state):
        # Mix columns for each column
        for col in range(4):
            s0, s1, s2, s3 = state[0][col], state[1][col], state[2][col], state[3][col]
            state[0][col] = self.GF.multiply(0x02, s0) ^ self.GF.multiply(0x03, s1) ^ s2 ^ s3
            state[1][col] = s0 ^ self.GF.multiply(0x02, s1) ^ self.GF.multiply(0x03, s2) ^ s3
            state[2][col] = s0 ^ s1 ^ self.GF.multiply(0x02, s2) ^ self.GF.multiply(0x03, s3)
            state[3][col] = self.GF.multiply(0x03, s0) ^ s1 ^ s2 ^ self.GF.multiply(0x02, s3)
        return state

    def add_round_key(self, state, round_key):
        # round_key is list of 16 bytes, state is 4x4
        for i in range(4):
            for j in range(4):
                state[i][j] ^= round_key[i + 4*j]
        return state

    def key_expansion(self, key):
        # key is list of 16 bytes
        # Expand to 176 bytes (44 words of 4 bytes each)
        expanded_key = [0] * 176
        # First 16 bytes are the key
        for i in range(16):
            expanded_key[i] = key[i]
        # Generate the rest
        for i in range(16, 176, 4):
            temp = expanded_key[i-4:i]  # last 4 bytes
            if i % 16 == 0:  # every 16 bytes (4 words)
                # RotWord: rotate left by 1 byte
                temp = temp[1:] + temp[:1]
                # SubWord: apply S-box
                temp = [self.SBOX[b] for b in temp]
                # XOR with Rcon
                rcon_index = i // 16
                temp[0] ^= self.RCON[rcon_index]
            # XOR with word 4 positions back
            for j in range(4):
                expanded_key[i + j] = expanded_key[i - 16 + j] ^ temp[j]
        return expanded_key

    def encrypt(self, plaintext, key):
        # plaintext and key are lists of 16 bytes
        # Convert plaintext to state (4x4, column-major)
        state = [[0 for _ in range(4)] for _ in range(4)]
        for i in range(16):
            state[i % 4][i // 4] = plaintext[i]
        # Expand key
        expanded_key = self.key_expansion(key)
        # Initial AddRoundKey
        round_key = expanded_key[0:16]
        self.add_round_key(state, round_key)
        # 9 rounds
        for round_num in range(1, 10):
            self.sub_bytes(state)
            self.shift_rows(state)
            self.mix_columns(state)
            round_key = expanded_key[round_num*16:(round_num+1)*16]
            self.add_round_key(state, round_key)
        # Final round
        self.sub_bytes(state)
        self.shift_rows(state)
        round_key = expanded_key[160:176]
        self.add_round_key(state, round_key)
        # Convert state back to bytes
        ciphertext = []
        for j in range(4):
            for i in range(4):
                ciphertext.append(state[i][j])
        return ciphertext

    def inv_shift_rows(self, state):
        # Inverse shift rows: row 0 no shift, row 1 right by 1, row 2 by 2, row 3 by 3
        state[1] = state[1][-1:] + state[1][:-1]
        state[2] = state[2][-2:] + state[2][:-2]
        state[3] = state[3][-3:] + state[3][:-3]
        return state

    def inv_sub_bytes(self, state):
        # state is 4x4 list of bytes
        for i in range(4):
            for j in range(4):
                state[i][j] = self.INV_SBOX[state[i][j]]
        return state

    def inv_mix_columns(self, state):
        # Inverse mix columns for each column
        for col in range(4):
            s0, s1, s2, s3 = state[0][col], state[1][col], state[2][col], state[3][col]
            state[0][col] = self.GF.multiply(0x0e, s0) ^ self.GF.multiply(0x0b, s1) ^ self.GF.multiply(0x0d, s2) ^ self.GF.multiply(0x09, s3)
            state[1][col] = self.GF.multiply(0x09, s0) ^ self.GF.multiply(0x0e, s1) ^ self.GF.multiply(0x0b, s2) ^ self.GF.multiply(0x0d, s3)
            state[2][col] = self.GF.multiply(0x0d, s0) ^ self.GF.multiply(0x09, s1) ^ self.GF.multiply(0x0e, s2) ^ self.GF.multiply(0x0b, s3)
            state[3][col] = self.GF.multiply(0x0b, s0) ^ self.GF.multiply(0x0d, s1) ^ self.GF.multiply(0x09, s2) ^ self.GF.multiply(0x0e, s3)
        return state

    def decrypt(self, ciphertext, key):
        # ciphertext and key are lists of 16 bytes
        # Convert ciphertext to state (4x4, column-major)
        state = [[0 for _ in range(4)] for _ in range(4)]
        for i in range(16):
            state[i % 4][i // 4] = ciphertext[i]
        # Expand key
        expanded_key = self.key_expansion(key)
        # Initial AddRoundKey with last round key
        round_key = expanded_key[160:176]
        self.add_round_key(state, round_key)
        # 9 rounds in reverse
        for round_num in range(9, 0, -1):
            self.inv_shift_rows(state)
            self.inv_sub_bytes(state)
            round_key = expanded_key[round_num*16:(round_num+1)*16]
            self.add_round_key(state, round_key)
            self.inv_mix_columns(state)
        # Final round
        self.inv_shift_rows(state)
        self.inv_sub_bytes(state)
        round_key = expanded_key[0:16]
        self.add_round_key(state, round_key)
        # Convert state back to bytes
        plaintext = []
        for j in range(4):
            for i in range(4):
                plaintext.append(state[i][j])
        return plaintext

# Test function
# def test_aes():
#     aes = AES()

#     plaintext_str = input("Enter plaintext (up to 16 characters, including numbers and spaces): ")
#     plaintext_bytes = plaintext_str.encode('utf-8')[:16]  # Take first 16 bytes
#     plaintext = list(plaintext_bytes) + [0] * (16 - len(plaintext_bytes))  # Pad with zeros if shorter
#     key = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]  # Fixed key

#     ciphertext = aes.encrypt(plaintext, key)
#     print("Encrypted ciphertext:", ''.join(f'{x:02x}' for x in ciphertext))

#     decrypted = aes.decrypt(ciphertext, key)
#     print("Decrypted plaintext:", ''.join(f'{x:02x}' for x in decrypted))

#     # Convert back to string for display
#     decrypted_str = bytes(decrypted).decode('utf-8', errors='ignore').rstrip('\x00')
#     print("Decrypted text:", repr(decrypted_str))

#     if decrypted == plaintext:
#         print("Decryption successful!")
#     else:
#         print("Decryption failed!")

# if __name__ == "__main__":
#     test_aes()
